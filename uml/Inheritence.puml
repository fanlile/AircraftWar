@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + increaseHp(int blood):void
    + forward():void
    + shoot():List<BaseBullet>
    + increaseScore(int score):int
    + drop_prop():List<BaseProp>
}

AbstractAircraft <|-- HeroAircraft

interface Enemy {

}

interface EnemyFactory {
    + createEnemy():AbstractAircraft
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + increaseScore(int score):int
    + drop_prop():List<BaseProp>
}
AbstractAircraft <|-- MobEnemy
Enemy <|.. MobEnemy

class MobEnemyFactory {
    + createEnemy():AbstractAircraft
}

EnemyFactory <|.. MobEnemyFactory
MobEnemyFactory ..> MobEnemy

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():
    + shoot():List<BaseBullet>
    + increase(int score):int
    + drop_prop():List<BaseProp>
}
AbstractAircraft <|-- EliteEnemy
Enemy <|.. EliteEnemy

class EliteEnemyFactory{
    + createEnemy():AbstractAircraft
}

EnemyFactory <|.. EliteEnemyFactory
EliteEnemyFactory ..> EliteEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class BaseProp {
    + BaseProp(int locationX, int locationY,int speedX, int speedY)
    + forward():void
    + {abstract} active(HeroAircraft heroAircraft)
}

interface BasePropFactory {
    + createBaseProp(int x, int y):BaseProp
}

class Prop_Blood {
    - blood:int
    + Prop_Blood(int locationX, int locationY, int speedX, int speedY, int blood)
    + active(HeroAircraft heroAircraft):void
}

class Prop_BloodFactory {
    + createBaseProp(int x,int y):BaseProp
}

BasePropFactory <|.. Prop_BloodFactory
Prop_BloodFactory ..> Prop_Blood

class Prop_Bomb {
    + Prop_Bomb(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft):void
}

class Prop_BombFactory {
    + createBaseProp(int x,int y):BaseProp
}

BasePropFactory <|.. Prop_BombFactory
Prop_BombFactory ..> Prop_Bomb

class Prop_Bullet {
    + Prop_Bullet(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft):void
}

class Prop_BulletFactory {
    + createBaseProp(int x,int y):BaseProp
}

BasePropFactory <|.. Prop_BulletFactory
Prop_BulletFactory ..> Prop_Bullet

BaseProp <|-- Prop_Blood
BaseProp <|-- Prop_Bomb
BaseProp <|-- Prop_Bullet
BaseProp ..> HeroAircraft
Prop_Blood ..> HeroAircraft
Prop_Bomb ..> HeroAircraft
Prop_Bullet ..> HeroAircraft

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

@enduml